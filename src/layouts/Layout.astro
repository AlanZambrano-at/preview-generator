---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<link rel="icon" type="image/svg+xml" href="./Airtable_Logo.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<section>
			<div
				class="min-h-full flex flex-col justify-center py-12 sm:px-6 lg:px-8"
			>
				<div class="sm:mx-auto sm:w-full sm:max-w-md">
					<img
						class="mx-auto h-12 w-auto"
						src="./Airtable_Logo.svg"
						alt="Workflow"
					/>
					<h2
						class="mt-6 text-center text-3xl font-extrabold text-gray-900"
					>
						Preview Link Generator
					</h2>
				</div>
				<div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
					<div
						class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10"
					>
						<div class="space-y-6" id="prevent">
							<div>
								<label
									for="text"
									class="block text-sm font-medium text-gray-700"
								>
									Link
								</label>
								<div class="mt-1">
									<input
										id="previewLinkInput"
										placeholder="Enter Link"
										name="text"
										type="text"
										required
										class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
									/>
								</div>
							</div>
							<div id="previewLinkOutputDiv">
								<label
									for="search"
									class="block text-sm font-medium text-gray-700"
									>Preview Link</label
								>
								<div class="mt-1 relative flex items-center">
									<input
										readonly
										placeholder="Preview Link Output"
										type="text"
										name="resultsInput"
										id="resultsInput"
										class="focus:outline-none shadow-sm block w-full pr-12 px-3 py-2 sm:text-sm border rounded-md"
									/>
									<div
										class="absolute inset-y-0 right-0 flex py-1.5 pr-1.5"
									>
										<kbd
											id="copyOutput"
											style="cursor: pointer"
											class="inline-flex items-center border border-gray-200 rounded px-2 text-sm font-sans font-medium text-gray-700 bg-indigo-100 hover:bg-indigo-200"
										>
											copy
										</kbd>
									</div>
								</div>
							</div>
							<div class="flex items-center justify-between">
							</div>
							<div>
								<button
									type="submit"
									id="submitBtn"
									class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
									>Get Link</button
								>
							</div>
						</div>
					</div>
				</div>
			</div>
		</section>
	</body>
</html>
<script is:inline>
	function copyToClipboard() {
		if (resultsInput.value.length) {
			previewLinkOutputDiv.style.display = "block";

			navigator.clipboard
				.writeText(resultsInput.value)
				.then(() => {
					submitBtn.innerHTML = "Copied To Clipboard ✅";
					submitBtn.classList.replace(
						"hover:bg-indigo-700",
						"hover:bg-green-700"
					);
					submitBtn.classList.replace(
						"bg-indigo-600",
						"bg-green-600"
					);
					submitBtn.classList.replace(
						"focus:ring-indigo-500",
						"focus:ring-green-500"
					);
					setTimeout(() => {
						submitBtn.innerHTML = "Get Link";
						submitBtn.classList.replace(
							"hover:bg-green-700",
							"hover:bg-indigo-700"
						);
						submitBtn.classList.replace(
							"bg-green-600",
							"bg-indigo-600"
						);
						submitBtn.classList.replace(
							"focus:ring-green-500",
							"focus:ring-indigo-500"
						);
					}, 3000);
				})
				.catch(() => {
					console.log("failed");
				});
		}
	}

	function isValidHttpUrl(string) {
		try {
			new URL(string);
		} catch (_) {
			return false;
		}
		return true;
	}

	const secret =
		"/api/enter-preview/?secret=jtagbutzuvxuxr4sswz3hsv5b8g39u6f&slug=";

	function getUrl(link) {
		const url = new URL(link);
		const { host } = url;
		const pathname = link
			.replace(host, "")
			.replace("https://", "")
			.replace("http://", "");
		return `${host}${secret}${pathname || "/"}`;
	}

	// selectors
	const previewLinkInput = document.getElementById("previewLinkInput");
	const resultsInput = document.getElementById("resultsInput");
	const submitBtn = document.getElementById("submitBtn");
	const copyOutputBtn = document.getElementById("copyOutput");
	const previewLinkOutputDiv = document.getElementById(
		"previewLinkOutputDiv"
	);

	if (
		[
			previewLinkInput,
			resultsInput,
			submitBtn,
			copyOutputBtn,
			previewLinkOutputDiv,
		].some((c) => c === null)
	) {
		console.log("Cant continue!!");
		// return;
	}

	// don't display previewLinkOutputDiv at the beginning
	previewLinkOutputDiv.style.display = "none";

	// add event handlers
	const previewLinkInputHandler = (e) => {
		if (
			!isValidHttpUrl(e.target.value) ||
			!isValidHttpUrl(
				`https://${e.target.value}` || !e.target.value.includes(".com")
			)
		) {
			resultsInput.value = "";
		}
	};

	const submitButtonHandler = () => {
		const { value } = previewLinkInput;
		if (value.includes(secret)) {
			resultsInput.value = value;
			return;
		}
		if (isValidHttpUrl(value)) {
			resultsInput.value = getUrl(value);
			copyToClipboard();
		} else {
			// add protocol
			const withProtocol = `https://${value}`;
			if (isValidHttpUrl(withProtocol) && withProtocol.includes(".com")) {
				resultsInput.value = getUrl(withProtocol);
				copyToClipboard();
			}
		}
	};

	//  add events
	previewLinkInput.addEventListener("input", previewLinkInputHandler);
	submitBtn.addEventListener("click", submitButtonHandler);
	copyOutputBtn.addEventListener("click", () => {
		copyToClipboard();
		if (resultsInput.value) {
			copyOutputBtn.classList.replace("bg-indigo-100", "bg-green-100");
			copyOutputBtn.classList.replace(
				"hover:bg-indigo-200",
				"hover:bg-green-200"
			);
			copyOutputBtn.innerHTML = "Copied To Clipboard ✅";
			setTimeout(() => {
				copyOutputBtn.innerHTML = "Copy";
				copyOutputBtn.classList.replace(
					"bg-green-100",
					"bg-indigo-100"
				);
				copyOutputBtn.classList.replace(
					"hover:bg-green-200",
					"hover:bg-indigo-200"
				);
			}, 3000);
		}
	});
</script>
